package com.example.chatgptprojectappv11;

import static android.content.ContentValues.TAG;

import android.app.DatePickerDialog;
import android.app.Person;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.text.InputType;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Scanner;
import java.util.UUID;

public class BirthdayListActivity extends AppCompatActivity {

    private static final String BIRTHDAYS_FILENAME = "birthdays.txt";
    private EditText editTextName, editTextSurname, editTextCompany, editTextBirthday;
    private Context context;
    private SimpleDateFormat dateFormat;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_birthday_list);

        editTextName = findViewById(R.id.edit_text_name);
        editTextSurname = findViewById(R.id.edit_text_surname);
        editTextCompany = findViewById(R.id.edit_text_company);
        editTextBirthday = findViewById(R.id.edit_text_birthday);
        context = this;

        // Set date format for editTextBirthday
        dateFormat = new SimpleDateFormat("dd.MM.yyyy");
        editTextBirthday.setInputType(InputType.TYPE_NULL); // Disable soft keyboard
        editTextBirthday.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // Show DatePickerDialog to choose a date
                Calendar calendar = Calendar.getInstance();
                int year = calendar.get(Calendar.YEAR);
                int month = calendar.get(Calendar.MONTH);
                int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);
                DatePickerDialog datePickerDialog = new DatePickerDialog(context, new DatePickerDialog.OnDateSetListener() {
                    @Override
                    public void onDateSet(DatePicker datePicker, int year, int month, int dayOfMonth) {
                        Calendar selectedDate = Calendar.getInstance();
                        selectedDate.set(year, month, dayOfMonth);
                        editTextBirthday.setText(dateFormat.format(selectedDate.getTime()));
                    }
                }, year, month, dayOfMonth);
                datePickerDialog.show();
            }
        });
    }

    public void readBirthdays(Context context) {
        new Thread(new Runnable() {
            @Override
            public void run() {
                List<Birthday> birthdaysList = new ArrayList<>();
                try (Scanner scanner = new Scanner(new File(context.getFilesDir(), BIRTHDAYS_FILENAME))) {
                    while (scanner.hasNextLine()) {
                        String line = scanner.nextLine();
                        String[] parts = line.split(",");
                        String name = parts[0];
                        String date = parts[1];
                        birthdaysList.add(new Birthday(name, date));
                    }
                } catch (IOException e) {
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            Toast.makeText(context, "Ошибка чтения файла", Toast.LENGTH_SHORT).show();
                        }
                    });
                    Log.e(TAG, "readBirthdays: Ошибка чтения файла", e);
                }
            }
        }).start();
    }

    public void addBirthday(Context context, EditText nameEditText, EditText birthdateEditText) {
        String name = nameEditText.getText().toString().trim();
        String birthdate = birthdateEditText.getText().toString().trim();

        if (name.isEmpty() || birthdate.isEmpty()) {
            Toast.makeText(context, "Name and birthdate cannot be empty", Toast.LENGTH_SHORT).show();
            return;
        }

        Birthday birthday = new Birthday(name, birthdate);

        try (FileWriter writer = new FileWriter(new File(context.getFilesDir(), BIRTHDAYS_FILENAME), true)) {
            writer.append(birthday.getName()).append(",").append(birthday.getBirthdate()).append("\n");
            Toast.makeText(context, "День рождения добавлен", Toast.LENGTH_SHORT).show();
        } catch (IOException e) {
            Toast.makeText(context, "Ошибка записи в файл", Toast.LENGTH_SHORT).show();
            Log.e(TAG, "addBirthday: Ошибка записи в файл", e);
        }
    }
    public class Person {
        private final String name;
        private final String surname;
        private final String birthday;
        private final String birthMonth;
        private final String birthYear;
        private final String company;

        public Person(String name, String surname, String birthday, String birthMonth, String birthYear, String company) {
            this.name = name;
            this.surname = surname;
            this.birthday = birthday;
            this.birthMonth = birthMonth;
            this.birthYear = birthYear;
            this.company = company;
        }

        // getters and setters for the private fields

        public String toString() {
            return name + "," + surname + "," + company + "," + birthday;
        }
    }
    public void savePersonToFile(Context context, String name, String surname, String company, String birthday) {
        // Create a new Person object
        Person person = new Person(name, surname, birthday, birthMonth, birthYear, company);


        try (BufferedWriter writer = new BufferedWriter(new FileWriter(new File(context.getFilesDir(), String.format("birthday_list_%s.txt", UUID.randomUUID().toString()))))) {
            // Write the data to the file
            writer.write(person.toString());

            // Display success message
            Toast.makeText(context, "Person added to the list", Toast.LENGTH_SHORT).show();

        } catch (IOException e) {
            e.printStackTrace();
            Toast.makeText(context, "Error: Person could not be added to the list", Toast.LENGTH_SHORT).show();
        }
    }

    private ArrayList<PersonInfo> readFiles(Context context) {
        ArrayList<PersonInfo> list = new ArrayList<>();
        new Thread(new Runnable() {
            @Override
            public void run() {
                try (InputStream is = context.getAssets().open("birthdays.txt");
                     BufferedReader reader = new BufferedReader(new InputStreamReader(is))) {
                    String line = reader.readLine();
                    while (line != null) {
                        String[] parts = line.split(",");
                        String name = parts[0].trim();
                        String birthdate = parts[1].trim();
                        list.add(new Person(name, surname, birthday, birthMonth, birthYear, company));
                        line = reader.readLine();
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }).start();
        return list;
    }

    public class MainActivity extends AppCompatActivity {

        private static final String TAG = "MainActivity";
        private RecyclerView recyclerView;
        private List<Birthday> birthdayList;

        @Override
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_birthday_list);

            recyclerView = findViewById(R.id.recyclerview_birthday);
            LinearLayoutManager layoutManager = new LinearLayoutManager(this);
            recyclerView.setLayoutManager(layoutManager);

            // set up RecyclerView.RecycledViewPool to cache views
            RecyclerView.RecycledViewPool recycledViewPool = new RecyclerView.RecycledViewPool();
            recyclerView.setRecycledViewPool(recycledViewPool);

            // вызов метода для чтения файлов и создания объектов PersonInfo
            readFiles(this, new ReadFilesCallback() {

                @Override
                public void onReadComplete(List<Birthday> birthdayList) {
                    MainActivity.this.birthdayList = birthdayList;
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            viewBirthdayList();
                        }
                    });
                }
            });
        }

        private void viewBirthdayList() {
            BirthdayAdapter adapter = new BirthdayAdapter(birthdayList);
            recyclerView.setAdapter(adapter);
            // ...
        }
    }

    // Адаптер для RecyclerView
    public static class BirthdayAdapter extends RecyclerView.Adapter<BirthdayAdapter.BirthdayViewHolder> {

        private List<Birthday> birthdayList;
        private List<String[]> splitList;

        public BirthdayAdapter(List<Birthday> birthdayList) {
            this.birthdayList = birthdayList;
            splitList = new ArrayList<>();
            for (Birthday birthday : birthdayList) {
                splitList.add(birthday.toString().split(","));
            }
        }

        @NonNull
        @Override
        public BirthdayViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
            ItemBirthdayBinding binding = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext()), R.layout.item_birthday, parent, false);
            return new BirthdayViewHolder(binding);
        }

        @Override
        public void onBindViewHolder(@NonNull BirthdayViewHolder holder, int position) {
            // Получаем день рождения из списка и устанавливаем значения в соответствующие поля ViewHolder
            String[] parts = splitList.get(position);
            holder.binding.nameTextView.setText(parts[0]);
            holder.binding.birthdateTextView.setText(parts[1]);
        }

        @Override
        public int getItemCount() {
            // Возвращаем количество элементов в списке дней рождения
            return birthdayList.size();
        }

        public static class BirthdayViewHolder extends RecyclerView.ViewHolder {

            private ItemBirthdayBinding binding;

            public BirthdayViewHolder(ItemBirthdayBinding binding) {
                super(binding.getRoot());
                this.binding = binding;
            }
        }
    }

    // Scanner class for reading data from file
    class FileScanner implements AutoCloseable {
        private Scanner scanner;

        public FileScanner(File file) throws FileNotFoundException {
            this.scanner = new Scanner(file);
        }

        public String nextLine() {
            if (scanner.hasNextLine()) {
                return scanner.nextLine();
            }
            return null;
        }

        public boolean hasNextLine() {
            return scanner.hasNextLine();
        }

        @Override
        public void close() {
            scanner.close();
        }
    }

    private void viewBirthdayList() {
        try {
            File file = new File(getFilesDir(), "birthdays.txt");
            Scanner scanner = new Scanner(file);
            List<PersonInfo> people = new ArrayList<>();
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                String[] parts = line.split(",");
                if (parts.length != 4) {
                    Log.w(TAG, "Invalid input data: " + line);
                    continue;
                }
                String name = parts[0];
                String surname = parts[1];
                String company = parts[2];
                String birthday = parts[3];
                PersonInfo person = new PersonInfo(name, surname, company, birthday);
                people.add(person);
            }
            scanner.close();

            // Display the list using RecyclerView
            RecyclerView recyclerView = findViewById(R.id.recyclerview_birthday);
            BirthdayAdapter adapter = new BirthdayAdapter(people);
            recyclerView.setAdapter(adapter);
            recyclerView.setLayoutManager(new LinearLayoutManager(this));
        } catch (FileNotFoundException e) {
            Log.e(TAG, "viewBirthdayList: Файл birthdays.txt не найден", e);
        }
    }

    private void readFiles() {
        List<PersonInfo> people = new ArrayList<>();

        // Получаем все файлы в директории
        File[] files = this.getFilesDir().listFiles();

        for (File file : files) {
            try (Scanner scanner = new Scanner(file)) {
                scanner.useDelimiter(",");
                String name = scanner.next();
                String surname = scanner.next();
                String company = scanner.next();
                String birthday = scanner.next();

                PersonInfo person = new PersonInfo(name, surname, company, birthday);
                people.add(person);
            } catch (FileNotFoundException e) {
                Log.e(TAG, "readFiles: Файл " + file.getAbsolutePath() + " не найден", e);
            }
        }

        // Create new Intent to launch BirthdayListDisplayActivity
        Intent intent = new Intent(MainActivity.this, BirthdayListDisplayActivity.class);
        ArrayList personList = new ArrayList(people);
        intent.putParcelableArrayListExtra("people", personList);
        startActivity(intent);

        class BirthdayAdapter extends RecyclerView.Adapter {
            private List birthdayList;

            public BirthdayAdapter(List birthdayList) {
                this.birthdayList = birthdayList;
            }

            @NonNull
            @Override
            public BirthdayViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
                View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_birthday, parent,
                        false);
                return new BirthdayViewHolder(view);
            }

            @Override
            public void onBindViewHolder(@NonNull BirthdayViewHolder holder, int position) {
                PersonInfo person = (PersonInfo) birthdayList.get(position);
                holder.nameTextView.setText(person.getName() + " " + person.getSurname());
                holder.birthdateTextView.setText(person.getBirthday());
            }

            @Override
            public int getItemCount() {
                return birthdayList.size();
            }

            class BirthdayViewHolder extends RecyclerView.ViewHolder {
                private TextView nameTextView;
                private TextView birthdateTextView;

                public BirthdayViewHolder(View itemView) {
                    super(itemView);
                    nameTextView = itemView.findViewById(R.id.textview_name);
                    birthdateTextView = itemView.findViewById(R.id.textview_birthdate);
                }
            }
        }
    }
}


