package com.example.chatgptprojectappv11;

import static android.content.ContentValues.TAG;

import android.app.Person;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.text.Editable;
import android.text.InputType;
import android.text.TextWatcher;
import android.text.method.DigitsKeyListener;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.RecyclerView;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Scanner;

public class BirthdayListActivity extends AppCompatActivity {

    private static final String BIRTHDAYS_FILENAME = "birthdays.txt";
    private EditText editTextName, editTextSurname, editTextCompany, editTextBirthday;
    private Context context;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_birthday_list);

        editTextName = findViewById(R.id.edit_text_name);
        editTextSurname = findViewById(R.id.edit_text_surname);
        editTextCompany = findViewById(R.id.edit_text_company);
        editTextBirthday = findViewById(R.id.edit_text_birthday);
        context = this;

        // Установить формат даты для editTextBirthday
        SimpleDateFormat format = new SimpleDateFormat("dd.MM.yyyy");
        editTextBirthday.setInputType(InputType.TYPE_CLASS_DATETIME);
        editTextBirthday.setKeyListener(DigitsKeyListener.getInstance("0123456789."));
        editTextBirthday.addTextChangedListener(new TextWatcher() {
            private String current = "";
            private String ddmmyyyy = "DDMMYYYY";
            private Calendar cal = Calendar.getInstance();

            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                if (!s.toString().equals(current)) {
                    String clean = s.toString().replaceAll("[^\\d.]|\\.", "");
                    String cleanC = current.replaceAll("[^\\d.]|\\.", "");

                    int cl = clean.length();
                    int sel = cl;
                    for (int i = 2; i <= cl && i < 6; i += 2) {
                        if (clean.charAt(i - 1) != '.') {
                            clean = clean.substring(0, i - 1) + '.' + clean.substring(i - 1);
                        }
                    }

                    // Процесс форматирования даты с использованием SimpleDateFormat
                    if (clean.equals(cleanC))
                        sel--;

                    if (clean.length() < 8) {
                        clean += ddmmyyyy.substring(clean.length());
                    } else {
                        int day = Integer.parseInt(clean.substring(0, 2));
                        int mon = Integer.parseInt(clean.substring(2, 4));
                        int year = Integer.parseInt(clean.substring(4, 8));

                        if (mon > 12)
                            mon = 12;
                        cal.set(Calendar.MONTH, mon - 1);
                        year = (year < 1900) ? 1900 : (year > 2100) ? 2100 : year;
                        cal.set(Calendar.YEAR, year);

                        day = (day > cal.getActualMaximum(Calendar.DATE)) ? cal.getActualMaximum(Calendar.DATE) : day;
                        clean = String.format("%02d.%02d.%04d", day, mon, year);
                    }

                    clean = clean.substring(0, Math.min(clean.length(), 10));
                    sel = Math.max(0, Math.min(sel, clean.length() - 1));
                    editTextBirthday.setText(clean);
                    editTextBirthday.setSelection(sel);
                    current = clean;
                }
            }

            @Override
            public void afterTextChanged(Editable editable) {

            }
        });
    }

    public void readBirthdays(Context context) {
        List<Birthday> birthdaysList = new ArrayList<>();
        try (Scanner scanner = new Scanner(new File(context.getFilesDir(), BIRTHDAYS_FILENAME))) {
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                String[] parts = line.split(",");
                String name = parts[0];
                String date = parts[1];
                birthdaysList.add(new Birthday(name, date));
            }
        } catch (IOException e) {
            Toast.makeText(context, "Ошибка чтения файла", Toast.LENGTH_SHORT).show();
            Log.e(TAG, "readBirthdays: Ошибка чтения файла", e);
        }
    }

    public void addBirthday(Context context, EditText nameEditText, EditText birthdateEditText) {
        String name = nameEditText.getText().toString();
        String birthdate = birthdateEditText.getText().toString();

        Birthday birthday = new Birthday(name, birthdate);

        try (FileWriter writer = new FileWriter(new File(context.getFilesDir(), BIRTHDAYS_FILENAME), true)) {
            writer.append(birthday.getName()).append(",").append(birthday.getBirthdate()).append("\n");
            Toast.makeText(context, "День рождения добавлен", Toast.LENGTH_SHORT).show();
        } catch (IOException e) {
            Toast.makeText(context, "Ошибка записи в файл", Toast.LENGTH_SHORT).show();
            Log.e(TAG, "addBirthday: Ошибка записи в файл", e);
        }
    }

    public void savePersonToFile(Context context, String name, String surname, String company, String birthday) {
        // Create a new Person object
        Person person = new Person(name, surname, company, birthday);

        try {
            // Get the file directory
            File fileDir = context.getFilesDir();

            // Create a new file in the directory with a unique name
            String fileName = "birthday_list_" + System.currentTimeMillis() + ".txt";
            File file = new File(fileDir, fileName);

            // Create a new FileWriter object to write to the file
            FileWriter writer = new FileWriter(file);

            // Write the data to the file
            writer.write(person.toString());

            // Close the FileWriter object
            writer.close();

            // Display success message
            Toast.makeText(context, "Person added to the list", Toast.LENGTH_SHORT).show();

        } catch (IOException e) {
            e.printStackTrace();
            Toast.makeText(context, "Error: Person could not be added to the list", Toast.LENGTH_SHORT).show();
        }
    }

    private ArrayList<PersonInfo> readFiles(Context context) {
        ArrayList<PersonInfo> list = new ArrayList<>();
        try {
            InputStream is = context.getAssets().open("birthdays.txt");
            BufferedReader reader = new BufferedReader(new InputStreamReader(is));
            String line = reader.readLine();
            while (line != null) {
                String[] parts = line.split(",");
                String name = parts[0].trim();
                String birthdate = parts[1].trim();
                list.add(new PersonInfo(name, birthdate));
                line = reader.readLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return list;
    }

    private List<Birthday> birthdayList;

    public void BirthdayAdapter(List<Birthday> birthdayList) {
        this.birthdayList = birthdayList;
    }

    public static class BirthdayViewHolder extends RecyclerView.ViewHolder {
        // Add ViewHolder implementation here
        public BirthdayViewHolder(View itemView) {
            super(itemView);
        }
    }

    // Override onCreateViewHolder, onBindViewHolder and getItemCount methods here
    // ...

    public class MainActivity extends AppCompatActivity {

        private static final String TAG = "MainActivity";

        @Override
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_birthday_list);

            // вызов метода для отображения списка дней рождения
            viewBirthdayList();

            // вызов метода для чтения файлов и создания объектов PersonInfo
            readFiles();
        }

        // Адаптер для RecyclerView
        public static class BirthdayAdapter extends RecyclerView.Adapter<BirthdayAdapter.BirthdayViewHolder> {

            private List<String> birthdayList;

            public BirthdayAdapter(List<String> birthdayList) {
                this.birthdayList = birthdayList;
            }

            @NonNull
            @Override
            public BirthdayViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
                View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_birthday, parent, false);
                return new BirthdayViewHolder(view);
            }

            @Override
            public void onBindViewHolder(@NonNull BirthdayViewHolder holder, int position) {
                // Получаем день рождения из списка и устанавливаем значения в соответствующие
                // поля ViewHolder
                String birthday = birthdayList.get(position);
                holder.nameTextView.setText(birthday.split(",")[0]);
                holder.birthdateTextView.setText(birthday.split(",")[1]);
            }

            @Override
            public int getItemCount() {
                // Возвращаем количество элементов в списке дней рождения
                return birthdayList.size();
            }

            public static class BirthdayViewHolder extends RecyclerView.ViewHolder {

                private TextView nameTextView;
                private TextView birthdateTextView;

                public BirthdayViewHolder(View itemView) {
                    super(itemView);
                    nameTextView = itemView.findViewById(R.id.nameTextView);
                    birthdateTextView = itemView.findViewById(R.id.birthdateTextView);
                }
            }
        }

        // Scanner class for reading data from file
        class FileScanner {
            private Scanner scanner;

            public FileScanner(File file) throws FileNotFoundException {
                this.scanner = new Scanner(file);
            }

            public String nextLine() {
                if (scanner.hasNextLine()) {
                    return scanner.nextLine();
                }
                return null;
            }

            public boolean hasNextLine() {
                return scanner.hasNextLine();
            }

            public void close() {
                scanner.close();
            }
        }

        private void viewBirthdayList() {
            try {
                // Создаем FileScanner для чтения данных из файла
                FileScanner scanner = new FileScanner(new File(getFilesDir(), "birthdays.txt"));

                List<String> birthdayList = new ArrayList<>();
                // Считываем строки из файла и добавляем их в список дней рождения
                while (scanner.hasNextLine()) {
                    String line = scanner.nextLine();
                    birthdayList.add(line);
                }
                Log.d(TAG, "viewBirthdayList: " + birthdayList);

                // Используем RecyclerView для отображения списка дней рождения
                RecyclerView recyclerView = findViewById(R.id.recyclerview_birthday);
                BirthdayAdapter adapter = new BirthdayAdapter(birthdayList);
                recyclerView.setAdapter(adapter);
                recyclerView.setLayoutManager(new LinearLayoutManager(this));

                public class MyClass {

                    /**
                     * Просмотреть список дней рождений
                     */
                    private void viewBirthdayList() {
                        try {
                            File file = new File(getFilesDir(), "birthdays.txt");
                            Scanner scanner = new Scanner(file);
                            List<PersonInfo> people = new ArrayList<>();
                            while (scanner.hasNextLine()) {
                                String line = scanner.nextLine();
                                String[] parts = line.split(",");
                                String name = parts[0];
                                String surname = parts[1];
                                String company = parts[2];
                                String birthday = parts[3];
                                PersonInfo person = new PersonInfo(name, surname, company, birthday);
                                people.add(person);
                            }
                            scanner.close();
                        } catch (FileNotFoundException e) {
                            Log.e(TAG, "viewBirthdayList: Файл birthdays.txt не найден", e);
                        }
                    }

                    /**
                     * Чтение файлов
                     */
                    private void readFiles() {
                        List<PersonInfo> people = new ArrayList<>();

                        // Получаем все файлы в директории
                        File[] files = this.getFilesDir().listFiles();

                        // some code
                    }
                }

                // Читаем данные из каждого файла и создаем объект PersonInfo
                for (File file : files) {
                    try (Scanner scanner = new Scanner(file)) {
                        String line = scanner.nextLine();

                        // Создаем новый объект PersonInfo
                        String[] parts = line.split(",");
                        String name = parts[0];
                        String surname = parts[1];
                        String company = parts[2];
                        String birthday = parts[3];

                        PersonInfo person = new PersonInfo(name, surname, company, birthday);
                        people.add(person);
                    } catch (FileNotFoundException e) {
                        Log.e(TAG, "readFiles: Файл " + file.getAbsolutePath() + " не найден", e);
                    }
                }

                // Создаем новый Intent для запуска BirthdayListDisplayActivity
                Intent intent = new Intent(this, BirthdayListDisplayActivity.class);

                // Добавляем ArrayList в качестве дополнительной информации в Intent
                intent.putParcelableArrayListExtra("people", new ArrayList<>(people));

                // Запускаем BirthdayListDisplayActivity
                startActivity(intent);
            } catch (FileNotFoundException e) {

                public class BirthdayAdapter extends RecyclerView.Adapter<BirthdayAdapter.BirthdayViewHolder> {
                    private List<PersonInfo> birthdayList;

                    public BirthdayAdapter(List<PersonInfo> birthdayList) {
                        this.birthdayList = birthdayList;
                    }

                    @NonNull
                    @Override
                    public BirthdayViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
                        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_birthday, parent,
                                false);
                        return new BirthdayViewHolder(view);
                    }

                    @Override
                    public void onBindViewHolder(@NonNull BirthdayViewHolder holder, int position) {
                        PersonInfo person = birthdayList.get(position);
                        holder.nameTextView.setText(person.getName() + " " + person.getSurname());
                        holder.birthdateTextView.setText(person.getBirthday());
                    }

                    @Override
                    public int getItemCount() {
                        return birthdayList.size();
                    }

                    public static class BirthdayViewHolder extends RecyclerView.ViewHolder {

                        private TextView nameTextView;
                        private TextView birthdateTextView;

                        public BirthdayViewHolder(View itemView) {
                            super(itemView);
                            nameTextView = itemView.findViewById(R.id.textview_name);
                            birthdateTextView = itemView.findViewById(R.id.textview_birthdate);
                        }
                    }
                }

                public class BirthdayViewHolder {
                }
            }
        }
    }
}
